export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string | number;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** An ISO 8601-encoded date */
  ISO8601Date: string;
  /** An ISO 8601-encoded datetime */
  ISO8601DateTime: string;
};

/** Autogenerated return type of AddFavouriteRecipeMutation */
export type AddFavouriteRecipeMutationPayload = {
  __typename?: 'AddFavouriteRecipeMutationPayload';
  errors?: Maybe<Array<ValidationError>>;
  recipe?: Maybe<Recipe>;
};

export type CreateRecipeInput = {
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  ingredients?: Maybe<Array<CreateRecipeInput_IngredientInput>>;
  equipments?: Maybe<Array<CreateRecipeInput_EquipmentInput>>;
  steps?: Maybe<Array<Scalars['String']>>;
};

export type CreateRecipeInput_EquipmentInput = {
  name: Scalars['String'];
  quantity?: Maybe<Scalars['Int']>;
};

export type CreateRecipeInput_IngredientInput = {
  name: Scalars['String'];
  quantityAmount?: Maybe<Scalars['Float']>;
  quantityUnit?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of CreateRecipeMutation */
export type CreateRecipeMutationPayload = {
  __typename?: 'CreateRecipeMutationPayload';
  errors?: Maybe<Array<ValidationError>>;
  recipe?: Maybe<Recipe>;
};

export type CreateReviewInput = {
  body: Scalars['String'];
  rating: Scalars['Int'];
};

/** Autogenerated return type of CreateReviewMutation */
export type CreateReviewMutationPayload = {
  __typename?: 'CreateReviewMutationPayload';
  errors?: Maybe<Array<ValidationError>>;
  recipe?: Maybe<Recipe>;
  review?: Maybe<Review>;
};

/** Autogenerated return type of DeleteRecipeMutation */
export type DeleteRecipeMutationPayload = {
  __typename?: 'DeleteRecipeMutationPayload';
  errors?: Maybe<Array<ValidationError>>;
  success?: Maybe<Scalars['Boolean']>;
};

export type Favouriteable = {
  favouritesCount: Scalars['Int'];
  isFavourite: Scalars['Boolean'];
};



export type Mutation = {
  __typename?: 'Mutation';
  addFavouriteRecipe?: Maybe<AddFavouriteRecipeMutationPayload>;
  createRecipe?: Maybe<CreateRecipeMutationPayload>;
  createReview?: Maybe<CreateReviewMutationPayload>;
  deleteRecipe?: Maybe<DeleteRecipeMutationPayload>;
  removeFavouriteRecipe?: Maybe<RemoveFavouriteRecipeMutationPayload>;
  signIn?: Maybe<SignInMutationPayload>;
  signOut?: Maybe<SignOutMutationPayload>;
  signUp?: Maybe<SignUpMutationPayload>;
};


export type MutationAddFavouriteRecipeArgs = {
  id: Scalars['ID'];
};


export type MutationCreateRecipeArgs = {
  input: CreateRecipeInput;
};


export type MutationCreateReviewArgs = {
  recipeId: Scalars['ID'];
  input: CreateReviewInput;
};


export type MutationDeleteRecipeArgs = {
  id: Scalars['ID'];
};


export type MutationRemoveFavouriteRecipeArgs = {
  id: Scalars['ID'];
};


export type MutationSignInArgs = {
  input: SignInInput;
};


export type MutationSignUpArgs = {
  input: SignUpInput;
};

/** Information about pagination in a connection. */
export type PageInfo = {
  __typename?: 'PageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']>;
};

export type Query = {
  __typename?: 'Query';
  currentUser?: Maybe<User>;
  recipe: Recipe;
  recipes: RecipeConnection;
};


export type QueryRecipeArgs = {
  id: Scalars['ID'];
};


export type QueryRecipesArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

export type Recipe = Favouriteable & {
  __typename?: 'Recipe';
  author: User;
  description: Scalars['String'];
  equipments: Array<RecipeEquipment>;
  favouritesCount: Scalars['Int'];
  id: Scalars['ID'];
  ingredients: Array<RecipeIngredient>;
  isFavourite: Scalars['Boolean'];
  name: Scalars['String'];
  permissions: RecipePermissions;
  reviews: ReviewConnection;
  steps: Array<RecipeStep>;
};


export type RecipeReviewsArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

/** The connection type for Recipe. */
export type RecipeConnection = {
  __typename?: 'RecipeConnection';
  /** A list of edges. */
  edges: Array<RecipeEdge>;
  /** A list of nodes. */
  nodes: Array<Recipe>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type RecipeEdge = {
  __typename?: 'RecipeEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Recipe;
};

export type RecipeEquipment = {
  __typename?: 'RecipeEquipment';
  id: Scalars['ID'];
  name: Scalars['String'];
  quantity?: Maybe<Scalars['Int']>;
};

export type RecipeIngredient = {
  __typename?: 'RecipeIngredient';
  id: Scalars['ID'];
  name: Scalars['String'];
  quantity?: Maybe<Scalars['String']>;
  quantityAmount?: Maybe<Scalars['Float']>;
  quantityUnit?: Maybe<Scalars['String']>;
};

/** Permissions granted to the current user for this Recipe. */
export type RecipePermissions = {
  __typename?: 'RecipePermissions';
  /** Indicates whether the current user can `delete` this object. */
  canDelete: Scalars['Boolean'];
  /** Indicates whether the current user can `favourite` this object. */
  canFavourite: Scalars['Boolean'];
  /** Indicates whether the current user can `review` this object. */
  canReview: Scalars['Boolean'];
  /** Indicates whether the current user can `update` this object. */
  canUpdate: Scalars['Boolean'];
};

export type RecipeStep = {
  __typename?: 'RecipeStep';
  body: Scalars['String'];
  id: Scalars['ID'];
};

/** Autogenerated return type of RemoveFavouriteRecipeMutation */
export type RemoveFavouriteRecipeMutationPayload = {
  __typename?: 'RemoveFavouriteRecipeMutationPayload';
  errors?: Maybe<Array<ValidationError>>;
  recipe?: Maybe<Recipe>;
};

export type Review = {
  __typename?: 'Review';
  author: User;
  body: Scalars['String'];
  id: Scalars['ID'];
  rating: Scalars['Int'];
};

/** The connection type for Review. */
export type ReviewConnection = {
  __typename?: 'ReviewConnection';
  /** A list of edges. */
  edges: Array<ReviewEdge>;
  /** A list of nodes. */
  nodes: Array<Review>;
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
};

/** An edge in a connection. */
export type ReviewEdge = {
  __typename?: 'ReviewEdge';
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
  /** The item at the end of the edge. */
  node: Review;
};

export type SignInInput = {
  email: Scalars['String'];
  password: Scalars['String'];
};

/** Autogenerated return type of SignInMutation */
export type SignInMutationPayload = {
  __typename?: 'SignInMutationPayload';
  errors?: Maybe<Array<ValidationError>>;
  session?: Maybe<UserSession>;
  user?: Maybe<User>;
};

/** Autogenerated return type of SignOutMutation */
export type SignOutMutationPayload = {
  __typename?: 'SignOutMutationPayload';
  success?: Maybe<Scalars['Boolean']>;
};

export type SignUpInput = {
  email: Scalars['String'];
  displayName: Scalars['String'];
  password: Scalars['String'];
  passwordConfirmation: Scalars['String'];
  dateOfBirth: Scalars['ISO8601Date'];
};

/** Autogenerated return type of SignUpMutation */
export type SignUpMutationPayload = {
  __typename?: 'SignUpMutationPayload';
  errors?: Maybe<Array<ValidationError>>;
  session?: Maybe<UserSession>;
  user?: Maybe<User>;
};

export type User = {
  __typename?: 'User';
  authoredRecipes: RecipeConnection;
  createdAt: Scalars['ISO8601DateTime'];
  displayName: Scalars['String'];
  favouritedRecipes: RecipeConnection;
  id: Scalars['ID'];
};


export type UserAuthoredRecipesArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type UserFavouritedRecipesArgs = {
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

export type UserSession = {
  __typename?: 'UserSession';
  expiresAt: Scalars['ISO8601DateTime'];
  token: Scalars['String'];
};

export type ValidationError = {
  __typename?: 'ValidationError';
  attribute: Scalars['String'];
  message: Scalars['String'];
};


export type ValidationErrorMessageArgs = {
  includeName?: Maybe<Scalars['Boolean']>;
};

export type SignInMutationVariables = Exact<{
  input: SignInInput;
}>;


export type SignInMutation = (
  { __typename?: 'Mutation' }
  & { signIn?: Maybe<(
    { __typename?: 'SignInMutationPayload' }
    & { user?: Maybe<(
      { __typename?: 'User' }
      & Pick<User, 'id'>
    )>, session?: Maybe<(
      { __typename?: 'UserSession' }
      & Pick<UserSession, 'token' | 'expiresAt'>
    )>, errors?: Maybe<Array<(
      { __typename?: 'ValidationError' }
      & ValidationErrorFragment
    )>> }
  )> }
);

export type SignUpMutationVariables = Exact<{
  input: SignUpInput;
}>;


export type SignUpMutation = (
  { __typename?: 'Mutation' }
  & { signUp?: Maybe<(
    { __typename?: 'SignUpMutationPayload' }
    & { user?: Maybe<(
      { __typename?: 'User' }
      & Pick<User, 'id'>
    )>, session?: Maybe<(
      { __typename?: 'UserSession' }
      & Pick<UserSession, 'token' | 'expiresAt'>
    )>, errors?: Maybe<Array<(
      { __typename?: 'ValidationError' }
      & ValidationErrorFragment
    )>> }
  )> }
);

export type CreateRecipeMutationVariables = Exact<{
  input: CreateRecipeInput;
}>;


export type CreateRecipeMutation = (
  { __typename?: 'Mutation' }
  & { createRecipe?: Maybe<(
    { __typename?: 'CreateRecipeMutationPayload' }
    & { recipe?: Maybe<(
      { __typename?: 'Recipe' }
      & Pick<Recipe, 'id' | 'name' | 'description'>
      & { steps: Array<(
        { __typename?: 'RecipeStep' }
        & Pick<RecipeStep, 'id' | 'body'>
      )> }
    )>, errors?: Maybe<Array<(
      { __typename?: 'ValidationError' }
      & Pick<ValidationError, 'attribute' | 'message'>
    )>> }
  )> }
);

export type MyRecipesQueryVariables = Exact<{ [key: string]: never; }>;


export type MyRecipesQuery = (
  { __typename?: 'Query' }
  & { currentUser?: Maybe<(
    { __typename?: 'User' }
    & Pick<User, 'id'>
    & { authoredRecipes: (
      { __typename?: 'RecipeConnection' }
      & { nodes: Array<(
        { __typename?: 'Recipe' }
        & Pick<Recipe, 'id' | 'name' | 'description'>
      )> }
    ) }
  )> }
);

export type RecipeDetailQueryVariables = Exact<{
  id: Scalars['ID'];
}>;


export type RecipeDetailQuery = (
  { __typename?: 'Query' }
  & { recipe: (
    { __typename?: 'Recipe' }
    & Pick<Recipe, 'id' | 'name' | 'description'>
    & { steps: Array<(
      { __typename?: 'RecipeStep' }
      & Pick<RecipeStep, 'id' | 'body'>
    )>, reviews: (
      { __typename?: 'ReviewConnection' }
      & { nodes: Array<(
        { __typename?: 'Review' }
        & Pick<Review, 'id' | 'body' | 'rating'>
        & { author: (
          { __typename?: 'User' }
          & Pick<User, 'id' | 'displayName'>
        ) }
      )>, pageInfo: (
        { __typename?: 'PageInfo' }
        & Pick<PageInfo, 'hasNextPage' | 'endCursor'>
      ) }
    ) }
    & RecipeIngredientsFragment
    & RecipeEquipmentsFragment
  ) }
);

export type RecipeEquipmentsFragment = (
  { __typename?: 'Recipe' }
  & { equipments: Array<(
    { __typename?: 'RecipeEquipment' }
    & Pick<RecipeEquipment, 'id' | 'name' | 'quantity'>
  )> }
);

export type RecipeIngredientsFragment = (
  { __typename?: 'Recipe' }
  & { ingredients: Array<(
    { __typename?: 'RecipeIngredient' }
    & Pick<RecipeIngredient, 'id' | 'name' | 'quantity'>
  )> }
);

export type ValidationErrorFragment = (
  { __typename?: 'ValidationError' }
  & Pick<ValidationError, 'attribute' | 'message'>
);
